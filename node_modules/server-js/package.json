{
  "_args": [
    [
      {
        "raw": "server-js",
        "scope": null,
        "escapedName": "server-js",
        "name": "server-js",
        "rawSpec": "",
        "spec": "latest",
        "type": "tag"
      },
      "/home/qwer/react-hello-world"
    ]
  ],
  "_from": "server-js@latest",
  "_id": "server-js@0.1.4",
  "_inCache": true,
  "_location": "/server-js",
  "_npmUser": {
    "name": "nelli.prashanth",
    "email": "nelli.prashanth1501@gmail.com"
  },
  "_npmVersion": "1.4.23",
  "_phantomChildren": {},
  "_requested": {
    "raw": "server-js",
    "scope": null,
    "escapedName": "server-js",
    "name": "server-js",
    "rawSpec": "",
    "spec": "latest",
    "type": "tag"
  },
  "_requiredBy": [
    "#USER"
  ],
  "_resolved": "https://registry.npmjs.org/server-js/-/server-js-0.1.4.tgz",
  "_shasum": "1dd9a7f34cc30ea6165619afe7f1fbbb570504ae",
  "_shrinkwrap": null,
  "_spec": "server-js",
  "_where": "/home/qwer/react-hello-world",
  "author": {
    "name": "Nelli.Prashanth kumar",
    "email": "nelli.prashanth1501@gmail.com",
    "url": "https://github.com/Prashanth-Nelli"
  },
  "bugs": {
    "url": "https://github.com/Prashanth-Nelli/webjs/issues"
  },
  "dependencies": {},
  "description": "leight wight web server for node.js",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "1dd9a7f34cc30ea6165619afe7f1fbbb570504ae",
    "tarball": "https://registry.npmjs.org/server-js/-/server-js-0.1.4.tgz"
  },
  "gitHead": "bf0117f8b4ee4a1cf0d5bd32692fb030952b56dd",
  "homepage": "https://github.com/Prashanth-Nelli/webjs#readme",
  "keywords": [
    "server",
    "web server",
    "node server",
    "server framework",
    "api",
    "rest api",
    "node webframework",
    "web"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/Prashanth-Nelli/webjs/blob/master/LICENSE"
    }
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "nelli.prashanth",
      "email": "nelli.prashanth1501@gmail.com"
    }
  ],
  "name": "server-js",
  "optionalDependencies": {},
  "readme": "server-js\n=========\n\nlight weight web framework for node.js\n\n[![NPM Version](https://img.shields.io/npm/v/server-js.svg?style=flat)](https://www.npmjs.org/package/server-js)\n[![Build Status](https://travis-ci.org/Prashanth-Nelli/webjs.svg?branch=master)](https://travis-ci.org/Prashanth-Nelli/webjs)\n\n###Documentation\n\ninstalling server-js using npm\n\n```bash\n\n$ npm install server-js\n\n```\n### server-js api\n```javascript\n\nvar server = require('server-js');\n\n```\n\n####server.use()\n\nyou can insert middleware using server.use() method\n\nexample:-\n\n```javascript\n      \n  server.use(morgan());\n  server.use(bodyparser());\n\n```\n####server.static();\n\nyou can serve static contents using with 'static' method input to the static method should be a directory.\nyou can server static content form different directories by passing different directories to server.static().\n\nexample:-\n\n```javascript\n\n  server.static(__dirname);\n  server.static(__dirname+'/test');\n\n```\n\n####server.settings\n\nit is an object it has two propeties their default values are given below\n\n```javscript\n\n  server.settings={\n    providebody:true,\n    limit:100*1024\n  }\n\n```\nif providebody set to false 'server-js' will not parse the body.\nyou can use any other middleware to achieve that,\nif providebody set to true you can set limit of request body length using settings object limit property.\nit defaults to 100kb.\n\nexample:-\n\n```javscript\n      \n  server.settings={\n    providebody:true,\n    limit:10*1024\n  }\n      \n```\n\n####server.verb();\n\nsupported verbs:- get,put,delete,post,trace,connect\n\nexample:-\n\n```javascript\n\n  server.get('/path1',function(req,res){\n        res.end('get path1')\n  });\n\n```\n\n####server.route('path');\n\nif you want to use different methods on single path you can do that with server.route\n\nexample: - \n\n```javascript\n\n  server.route('path2').get(function(req,res){\n             //request handling code       \n  }).put(function(req,res){  \n      //request handling code\n  }).post(function(req,res){\n      //request handling code\n  }).delete(function(req,res){\n      //request handling code\n  });\n\n```\n\n####server.start() \n\nreturns a httpserver instance\n\nyou can you this instance when ever required with other modules like socket.io\n\nexample:-\n\n```javascript\n          \n  var app = require('server-js').start();\n  var io = require('socket.io')(app);\n  app.listen(3000,funciton(){\n      console.log('Server started and listening on 3000 port');\n  });\n\n```\n\n#### server.start().listen()\n  \n  this is equivalent to http module [listen](nodejs.org/api/http.html#http_server_listen_port_hostname_backlog_callback)\n\n```javascript\n\n var app = require('server-js');\n  app.start().listen(3000,funciton(){\n        console.log('Server started and listening on 3000 port');\n  });\n    \n```\n#### request api\n\n##### req.params\n\nThis property is an object containing properties mapped to the named route \"parameters\".\nFor example, if you have the route /user/:name, then the \"name\" property is available to you as req.params.name.\nThis object defaults to {}. \n\nu can define path's with parameters like the following\n\n```javascript\n    \n    example:-\n    \n    //single parameter\n    \n  server.get('/path/:id',function(req,res){\n      res.end(req.params.id);\n  });\n  \n  //multiple parameters\n  \n  server.get('/path/:id/:value',function(req,res){\n      console.log(req.params.id+''+req.params.value);\n      res.end('request parameters');\n  });\n    \n    \n```\n\n#### response api\n\n##### res.send()\n\nyou can send strings,objects and buffers using res.send method \n\nit automatically sets the response content-type header based on the data passed to the method\n\nu can use res.send method in following ways\n\nExamples:-\n\n```javascript\n\n\tserver.get('route',function(req,res){\n\t\tres.send({data:'response'}); //sending an object\n\t\t//automaticallys sets the header application/json\n\t});\n\t\n\tserver.get('route',function(req,res){\n\t\tres.send('data'); //sending an object\n\t\t//automatically sets the header text/html\n\t});\n\t\n\tserver.get('route',function(req,res){\n\t\tres.send(new Buffer(3)); //sending an object\n\t\t//automatically sets the header application/octet-stream\n\t});\n\t\n```\n\n\n\n####Sample server written using server-js\n\n```javascript\n\nvar server = require('server-js');\n\n\n/*   server.use();   \n  *   \n*   here you can write the middleware code like checking whether the user has login etc.\n*   here you can use all the middlewares supported by the express webframework\n*   like for example :- \n*      \n*     server.use(morgan());//it is a logging middleware\n*\n*   u should always write your middleware at the top request will traverse in the order\n*   you written your server so your middleware should be at the top.\n*   you can use more than one middleware like the following.\n*\n*     server.use(morgan());\n*     server.use(bodyparser());\n*     \n*      server.use(function(req,res,next)){\n*       if you are using a function as a middleware you should call next() at\n*        the end of the function otherwise the request will not reach other layers\n*        in your server.\n*      }\n*\n*    example:- \n*              \n*               server.use(function(req,res,next){\n*                    // --middleware code--\n*                     next();               \n*               });\n*\n*    \n*    if you are handled the request in middleware based on condition like this you should not call\n*    next() after u handled the request,if you do an exception will be thrown.\n*                \n*     server.use(function(req,res,next){\n*                         \n*         if(somecondition){\n*             res.end('Error');\n*             //you should not call next() here because you already handled request\n*         }else{\n*             next(); \n*         }                  \n*                         \n*    });\n*\n*/\n\nserver.use(function(req,res,next){\n  \n  //middleware code\n  \n\tnext();\n});\n\nserver.static(__dirname);\n\nserver.static(__dirname+'/test');\n\n\nserver.get('/path', function(req, res) {\n\tres.end('path get');\n})\n\nserver.get('/path/:id', function(req, res) {\n\tres.end('path get with param' + req.params.id);\n});\n\nserver.route('/route').get(function(req, res) {\n\tres.end('received');\n}).put(function(req, res) {\n\tres.end('received put');\n}).delete(function(req, res) {\n\tres.end('received delete');\n});\n\nserver.route('/route2').get(function(req, res) {\n\tres.end('received route2 get');\n}).put(function(req, res) {\n\tres.end('route put');\n});\n\nserver.start().listen(3000, function() {\n\tconsole.log('server started');\n});\n\n\n\n```\n\n\n\nLicense\n======\n![MIT](LICENSE)\n",
  "readmeFilename": "README.md",
  "repository": {
    "url": "git+https://github.com/Prashanth-Nelli/webjs.git",
    "type": "git"
  },
  "scripts": {},
  "version": "0.1.4"
}
